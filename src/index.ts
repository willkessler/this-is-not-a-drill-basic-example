//
// This is a basic typescript example on how you can add the TINAD SDK
// to your app.  Change the displayMode (below) to update the way your
// notifications appear, and consult the docs and the example
// configuration object at the bottom of this script to see other
// available configuration settings.
//

import { 
  configureTinad, 
  generateDefaultConfiguration, 
  getCurrentConfiguration, 
  SDKConfiguration
} from '@this-is-not-a-drill/vanillajs-sdk';
import environment from './environment';

const newConfig = generateDefaultConfiguration(); // Set up a sensible initial configuration.
newConfig.api.endpoint = environment.API_ENDPOINT; // this is auto-set for you.
newConfig.api.key = environment.API_KEY; // if you are seeing this on Stackblitz, it's already set up for you

//
// *** TRY CHANGING THE DISPLAY MODE ***
// Try replacing the value of 'toast' with:
// 'modal', 'inline', or 'banner' 
// to see different notification styles.
//
newConfig.api.displayMode = 'toast';

configureTinad(newConfig); // Finally, update the SDK with your new settings (this also restarts the SDK).

//
// Set up this demo's "Reset notifications" button. 
// (In production you'll most likely never use this functionality.)
//
const resetButton = document.getElementById('reset-notifications');
resetButton.onclick = function() {
  // Note: When you reconfigure TINAD with the same configuration a second
  // time, this has the effect of resetting the views for the current
  // userId (as well as stopping any notification display in progress).
  console.log ('Resetting views'); 
  const currentConfig = getCurrentConfiguration();
  configureTinad(currentConfig);
};

// Uncomment the next two lines to see TINAD's current configuration.
// const currentConfig = getCurrentConfiguration();
// console.log(`Current TINAD config: ${JSON.stringify(currentConfig,null,2)}`);


// =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=--=-
// Below, find an example SDKConfiguration object with some
// basicdefaults.  Depending on the displayMode you choose, you will
// actually only need the property that's relevant to it, e.g.  if you
// choose displayMode: 'toast', then you actually only need to include
// the 'toast' property. Add your API key in the api block.  If you
// don't set a specific user id, the SDK will autogenerate one for
// you.  See the docs at docs.this-is-not-a-drill.com for more.
// =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=--=-
/*
{
    api: {
      displayMode : 'toast',
      userId: <autogenerated>, // Override this in your code or accept the autogenerated user id
      key: '',                 // Enter your API key in this property
      endpoint: 'https://api.this-is-not-a-drill.com',
      environments: [ 'Development' ],
      domains: [],
    },
    toast: {
      // One of these:
      // 'top', 'top-left, 'top-right, 'center', 'center-left, 'center-right,
      // 'bottom', 'bottom-left, or 'bottom-right'.
      position: 'top-right', // How long the toast shows (in milliseconds)
      duration: 5000,
      progressBar: false,
    },
    modal: {
      confirmButtonLabel: 'OK',
      show: {
        confirm: true,
        dismiss: true,
      },
    },
    inline: {
      target: {
        outer: 'tinad-inline-container',
        content: 'tinad-inline-content',
        confirm: 'tinad-inline-confirm',
        dismiss: 'tinad-inline-dismiss',
      },
      show: {
        confirm: true,
        dismiss: true,
      },
    },
    banner: {
      duration: 5000,
      target: {
        useDefaults: true,
      },
      show: {
        dismiss: true,
      },
    },
  };
*/
